%{
    #include "slang.hpp"
    #include <iostream>
    extern Node* root;
    extern char yytext[];
%}

%token FUNC PRINT RETURN OPENBLOCK CLOSEBLOCK INT
%token VAR INT_NUMBER FLOAT_NUMBER IDENTIFIER STRING

%left '|' '&' '^'
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS
%right '~'
//%expect 1

%nonassoc IF THEN
%nonassoc ELSE

%%

program : 
    global_list {
        auto node = new Node(NodeType::PROGRAM, {get_node($1)});
        root = node;
    };

global_list : 
    global {
        auto node = new Node(NodeType::GLOBAL_LIST, {get_node($1)});
        $$ = store_node(node);
    }
    | global_list global {
        auto node = new Node(NodeType::GLOBAL_LIST, {get_node($1), get_node($2)});
        $$ = store_node(node);
    };

global :
    function {
        auto node = new Node(NodeType::GLOBAL, { get_node($1) });
        $$ = store_node(node);
    }
    | declaration {
        auto node = new Node(NodeType::GLOBAL, { get_node($1) });
        $$ = store_node(node);
    }
    | array_declaration {
        auto node = new Node(NodeType::GLOBAL, { get_node($1) });
        $$ = store_node(node);
    }
    ;

declaration :
    VAR variable_list {
        auto node = new Node(NodeType::DECLARATION, { get_node($2) });
        $$ = store_node(node);
    }
    ;

variable_list :
    identifier {
        auto node = new Node(NodeType::VARIABLE_LIST, { get_node($1) });
        $$ = store_node(node);
    }
    | variable_list ',' identifier {
        auto node = new Node(NodeType::VARIABLE_LIST, { get_node($1), get_node($3) });
        $$ = store_node(node);
    }
    ;

array_declaration :
    VAR array_indexing {
        auto node = new Node(NodeType::ARRAY_DECLARATION, { get_node($2) });
        $$ = store_node(node);
    }
    ;

array_indexing :
    identifier '[' expression ']' {
        auto node = new Node(NodeType::ARRAY_INDEXING, { get_node($1), get_node($3) });
        $$ = store_node(node);
    }
    ;

function :
    FUNC identifier '(' parameter_list ')' statement {
        auto node = new Node(NodeType::FUNCTION, { get_node($2), get_node($4), get_node($6) });
        $$ = store_node(node);
    }
    ;

parameter_list : 
    {
        auto node = new Node(NodeType::PARAMETER_LIST, { });
        $$ = store_node(node);
    }
    | variable_list {
        auto node = new Node(NodeType::PARAMETER_LIST, { get_node($1)});
        $$ = store_node(node);
    }
    ;

statement :
    assignment_statement  {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | return_statement {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | print_statement {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | if_statement {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | while_statement {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | for_statement {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | break_statement {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
    | block {
        auto node = new Node(NodeType::STATEMENT, { get_node($1) });
        $$ = store_node(node);
    }
;

block : 
    OPENBLOCK declaration_list statement_list CLOSEBLOCK {
        auto node = new Node(NodeType::BLOCK, { get_node($2), get_node($3) });
        $$ = store_node(node);
    }
    | OPENBLOCK statement_list CLOSEBLOCK {
        auto node = new Node(NodeType::BLOCK, { get_node($2) });
        $$ = store_node(node);
    }
;

declaration_list :
    declaration {
        auto node = new Node(NodeType::DECLARATION_LIST, { get_node($1) });
        $$ = store_node(node);
    }
    | declaration_list declaration {
        auto node = new Node(NodeType::DECLARATION_LIST, { get_node($1), get_node($2) });
        $$ = store_node(node);
    }
;

statement_list :
    statement {
        auto node = new Node(NodeType::STATEMENT_LIST, { get_node($1) });
        $$ = store_node(node);
    }
    | statement_list statement {
        auto node = new Node(NodeType::STATEMENT_LIST, { get_node($1) , get_node($2) });
        $$ = store_node(node);
    }
;

assignment_statement : 
    identifier '=' expression ';' {
        auto node = new Node(NodeType::ASSIGNMENT_STATEMENT, { get_node($1) , get_node($3) });
        $$ = store_node(node);
    }
    | array_indexing '=' expression ';' {
        auto node = new Node(NodeType::ASSIGNMENT_STATEMENT, { get_node($1) , get_node($3) });
        $$ = store_node(node);
    }
;

return_statement :
    RETURN expression {
        auto node = new Node(NodeType::RETURN_STATEMENT, { get_node($2) });
        $$ = store_node(node);
    }
;

print_statement :
    PRINT '(' string ')' ';' {
        auto node = new Node(NodeType::PRINT_STATEMENT, { get_node($3) });
        $$ = store_node(node);
    }
    | PRINT '(' string ',' '[' expression_list ']' ')' ';' {
        auto node = new Node(NodeType::PRINT_STATEMENT, { get_node($3), get_node($6) });
        $$ = store_node(node);
    }
;

if_statement :

;

while_statement :

;

for_statement :

;

break_statement :

;

identifier :
    IDENTIFIER {
        auto node = new IdentifierNode(std::string(yytext));
        $$ = store_node(node);
    }
;

expression : 
    expression '+' expression {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1), get_node($3)});
        node->data = "+";
        $$ = store_node(node);
    }
    | expression '-' expression {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1), get_node($3)});
        node->data = "-";
        $$ = store_node(node);
    }
    | expression '*' expression {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1), get_node($3)});
        node->data = "*";
        $$ = store_node(node);
    }
    | expression '/' expression {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1), get_node($3)});
        node->data = "/";
        $$ = store_node(node);
    }
    | '-' expression {
        auto node = new Node(NodeType::EXPRESSION, {get_node($2)});
        node->data = "-";
        $$ = store_node(node);
    }
    | '(' expression ')' {
        auto node = new Node(NodeType::EXPRESSION, {get_node($2)});
        $$ = store_node(node);
    }
    | number {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1) });
        $$ = store_node(node);
    }
    | identifier {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1)});
        $$ = store_node(node);
    }
    | array_indexing {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1)});
        $$ = store_node(node);
    }
    | identifier '(' argument_list ')' {
        auto node = new Node(NodeType::EXPRESSION, {get_node($1), get_node($3)});
        $$ = store_node(node);
    }

;

expression_list :
    expression_list ',' expression {
        auto node = new Node(NodeType::EXPRESSION_LIST, {get_node($1), get_node($3)});
        $$ = store_node(node);
    }
    | expression {
        auto node = new Node(NodeType::EXPRESSION_LIST, {get_node($1) });
        $$ = store_node(node);
    }
;

number : 
    INT_NUMBER {
        auto node = new IntNode(atoi(yytext));
        $$ = store_node(node);
    }
    | FLOAT_NUMBER {
        auto node = new FloatNode(atof(yytext));
        $$ = store_node(node);
    }
;

argument_list : {
    auto node = new Node(NodeType::ARGUMENT_LIST, { });
        $$ = store_node(node);
    }
    | expression_list {
        auto node = new Node(NodeType::ARGUMENT_LIST, {  get_node($1) });
        $$ = store_node(node);
    }

string :
    STRING {
        auto node = new StringNode(std::string(yytext));
        $$ = store_node(node);
    }
;

%%

int yyerror(const char* error) {
    std::cout << error << " on line " << yylineno << std::endl;
    exit(EXIT_FAILURE);
}